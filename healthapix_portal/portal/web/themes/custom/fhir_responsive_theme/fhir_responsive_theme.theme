<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\core\Url;
use Drupal\user\Entity\User;

/**
 * @file
 * Functions to support theming in the fhir_responsive_theme theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function fhir_responsive_theme_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  if (isset($variables['is_front']) && $variables['is_front'] != '') {
    $variables['attributes']['class'][] = 'front';
  }
  $variables['is_admin'] = \Drupal::currentUser()
    ->hasPermission('access administration pages');
  if (isset($variables['is_admin']) && $variables['is_admin'] != '') {
    $variables['attributes']['class'][] = 'admin';
  }
  else {
    $variables['attributes']['class'][] = 'non-admin';
  }
  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function fhir_responsive_theme_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function fhir_responsive_theme_preprocess_page(array &$variables) {
  /**
   * @var  $site_config getting all site config details for page's slogan, name, logo and user details
   */
  \Drupal::service('page_cache_kill_switch')->trigger();
  $site_config = Drupal::config('system.site');
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $user_mail = $user->getEmail();
  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');
  $variables['logopath'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
  $get_user = \Drupal::currentUser()->id();
  $user_current = User::load($get_user);
  if (isset($user_current->get('mail')->value)) {
    $variables['user_mail_clipped'] = substr($user_current->get('mail')->value, 0, 16) . '...';
  }
  $variables['user_id'] = $get_user;
  if (isset($variables['node'])) {
    $variables['title'] = $variables['node']->title->value;
  }
  else {
    $variables['title'] = $variables['page']['#title'];
  }
}

/**
 * Creating Ajax submit and validation
 */
function fhir_responsive_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['#title'] = 'Log in (This is default demo login flow.)';
    $form['#prefix'] = '<div id="modal_example_form">';
    $form['#suffix'] = '</div>';
    // The status messages that will contain any form errors.
    $form['status_messages'] = [
      '#type' => 'status_messages',
      '#weight' => -10,
    ];
    $form['actions']['submit'] = [
      '#type' => 'submit',
      '#value' => 'Login',
      '#attributes' => [
        'class' => [
          'use-ajax',
        ],
      ],
      // Function to call when the users click on submit button.
      '#ajax' => [
        'callback' => 'submitModalFormAjax',
        'event' => 'click',
      ],
    ];
    $form['#validate'][] = 'fhir_responsive_theme_custom_validation';
    $form['name']['#attributes']['placeholder'] = t('Enter your User name or Email address');
    $form['pass']['#attributes']['placeholder'] = t('******');
    $form['name']['#title'] = t('User name or email address');
  }
  elseif ($form_id == 'user_register_form') {
    $form['#title'] = t('Register a new user');
    $form['first_name']['widget'][0]['value']['#title'] = 'First Name';
    $form['last_name']['widget'][0]['value']['#title'] = 'Last Name';
  }
  //  elseif ($form_id == 'user_form') {
  //    $form['account']['mail']['widget'][0]['value']['#attributes']['readonly'] = true;
  //    $form['mail']['widget'][0]['account']['#attributes']['readonly'] = TRUE;
  //  }
  elseif ($form_id == 'user_pass') {
    $form['#prefix'] = '<div id="modal_example_pass_form">';
    $form['#suffix'] = '</div>';
    // The status messages that will contain any form errors.
    $form['status_messages'] = [
      '#type' => 'status_messages',
      '#weight' => -10,
    ];
    $form['actions']['submit'] = [
      '#type' => 'submit',
      '#value' => 'E-mail new password',
      '#attributes' => [
        'class' => [
          'use-ajax',
        ],
      ],
      // Function to call when the users click on submit button.
      '#ajax' => [
        'callback' => 'submitModalFormAjaxPass',
        'event' => 'click',
      ],
    ];
    $form['#validate'][] = 'fhir_responsive_theme_custom_validation_pass';
  }
}

/**
 * Creating Ajax validation
 */
function fhir_responsive_theme_custom_validation($form, $form_state) {
  $errors = $form_state->getErrors();
  if (!empty($errors['name'])) {
    $string_error = $errors['name']->__tostring();
    if (strpos($string_error, 'Unrecognized username or password') !== FALSE) {
      $name_value = $form_state->getValue('name');
      $form_state->clearErrors();
      $form_state->setErrorByName('name', t('Sorry, unrecognized username or password. <a class="use-ajax pass-login" data-dialog-type="modal" href="user/password?name">Have you forgotten your password?</a>'
      ));
    }
  }
}

/**
 * Creating Ajax validation for forgot password
 */
function fhir_responsive_theme_custom_validation_pass($form, $form_state) {
  $errors = $form_state->getErrors();
  if (!empty($errors['name'])) {
    $name_value = $form_state->getValue('name');
    $form_state->clearErrors();
    $form_state->setErrorByName('name', t($name_value . ' is not recognized as a username or an email address'));
  }
}

/**
 * AJAX callback handler that displays any errors or a success message.
 */
function submitModalFormAjax(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
    // Remember the previous id ? Here it is
    $response->addCommand(new ReplaceCommand('#modal_example_form', $form));
  }
  else {
    $url = Url::fromRoute('<front>');
    $command = new RedirectCommand($url->toString());
    $response->addCommand($command);

  }
  return $response;
}

/**
 * AJAX callback handler that displays any errors or a success message.
 */
function submitModalFormAjaxPass(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
    // Remember the previous id ? Here it is
    $response->addCommand(new ReplaceCommand('#modal_example_pass_form', $form));
  }
  else {
    $url = Url::fromRoute('<front>');
    $command = new RedirectCommand($url->toString());
    $response->addCommand($command);

  }
  return $response;
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function fhir_responsive_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function fhir_responsive_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function fhir_responsive_theme_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function fhir_responsive_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function fhir_responsive_theme_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function fhir_responsive_theme_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function fhir_responsive_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function fhir_responsive_theme_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function fhir_responsive_theme_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function fhir_responsive_theme_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function fhir_responsive_theme_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function fhir_responsive_theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {

    if (strpos($variables['element']['#id'], 'user-login-form') !== FALSE) {
      $suggestions[] = 'form__' . str_replace('-', '_', 'user-login-form');
    }
    elseif (strpos($variables['element']['#id'], 'user-register-form') !== FALSE) {
      $suggestions[] = 'form__' . str_replace('-', '_', 'user-register-form');
    }
    elseif (strpos($variables['element']['#id'], 'user-pass-reset') !== FALSE) {
      $suggestions[] = 'form__' . str_replace('-', '_', 'user-pass-reset');
    }
    elseif (strpos($variables['element']['#id'], 'user-pass') !== FALSE) {
      $suggestions[] = 'form__' . str_replace('-', '_', 'user-pass');
    }
    else {
      $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function fhir_responsive_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function fhir_responsive_theme_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

/**
 * Implements hook_install.
 */
function fhir_responsive_install(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
