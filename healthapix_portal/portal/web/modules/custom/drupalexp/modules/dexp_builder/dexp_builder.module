<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Component\Utility\Html;
/**
 * Implement hook_theme()
 */
function dexp_builder_theme() {
  return array(
    'dexp_builder_element' => [
      'variables' => [
        'shortcode' => '',
        'title' => '',
        'content' => '',
        'text' => '',
        'class' => '',
        'attr' => array(),
      ]
    ],
    'dexp_builder_shortcode_list' => [
      'variables' => [
        'shortcodes' => array(),
      ]
    ],
    'dexp_builder_tabs' => [
      'variables' => [
        'tabs' => array(),
        'class' => '',
        'fade' => '',
      ],
    ],
    'dexp_builder_galleries' => [
      'variables' => [
        'galleries' => array(),
        'title' => '',
        'transition' => 'none',
        'slideshow' => 0,
        'width' => '',
        'height' => '',
        'class' => '',
      ],
    ],
    'dexp_builder_accordions' => [
      'variables' => [
        'tabs' => array(),
        'class' => '',
        'content' => '',
      ],
    ],
    'dexp_builder_accordion' => [
      'variables' => [
        'title' => array(),
        'icon' => '',
        'render_el' => '',
        'content' => '',
        'expanded' => 0,
      ],
    ],
    'dexp_builder_boxx' => [
      'variables' => [
        'icon' => '',
        'icon_select' => '',
        'use_text' => 0,
        'use_image' => 0,
        'icon_text' => '',
        'icon_image' =>'',
        'read_more' => '',
        'title' => '',
        'render_el' => '',
		    'box_link' => '',
		    'link_target' => '',
        'content' => '',
        'attributes' => '',
        'icon_attributes' => '',
        'class' => '',
        'icon_class' => '',
        'box_layout' => '',
      ],
    ],
    'dexp_builder_box' => [
      'theme path' => drupal_get_path('module', 'dexp_builder') .'/templates',
      //'template' => ['dexp-builder-box--layout-2'],
      //'base hook' => 'theme',
      'variables' => [
        'icon' => '',
        'icon_alignment' => '',
        'title' => 0,
        'content' => 0,
        'readmore' => '',
        'layout' => '',
        'attributes' => null,
      ],
    ],
    'dexp_builder_skillbar' => [
      'variables' => [
        'title' => '',
        'icon' => '',
        'percent' => 0,
        'duration' => 0,
        'height' => 5,
        'progress_color' => '',
        'bar_color' => '',
        'striped' => '',
        'animated_striped' => '',
        'striped_class' => '',
        'attributes' => '',
      ],
    ],
    'dexp_builder_progress_circle' => [
      'variables' => [
        'title' => '',
        'progress' => '',
        'content' => '',
        'attributes' => '',
      ],
    ],
    'dexp_builder_title' => [
      'variables' => [
        'title' => '',
        'render_el' => '',
        'subtitle' => '',
        'backword' => '',
        'class' => '',
      ],
    ],
    'dexp_builder_stats' => [
      'variables' => [
        'title' => '',
        'icon' => '',
        'number' => '',
        'duration' => '',
        'counter_prefix' => '',
        'counter_suffix' => '',
        'decimal' => '',
        'attributes' => null,
      ],
    ],
    'custom_css' => [
      'render element' => 'element',
    ],
    'dexp_builder_button' => [
      'variables' => [
        'title' => '',
        'icon' => '',
        'attributes' => '',
      ],
    ],
    'dexp_builder_googlechart' => [
      'variables' => [
        'title' => '',
        'chart_values' => '',
        'chart_options' => '',
        'chart_type' => '',
        'chart_size' => '',
        'attributes' => '',
      ],
    ],
    'dexp_builder_countdown' => [
      'variables' => [
        'title' => '',
        'clock' => '',
        'message' => '',
        'final_date' => '',
        'total' => '',
        'attributes' => '',
      ],
    ],
    'dexp_builder_icon' => [
      'variables' => [
        'icon' => '',
        'title' => '',
        'link' => '',
        'link_target' => '',
        'attributes' => '',
      ],
    ],
    'dexp_builder_gmap' => [
      'variables' => [
        'width' => 0,
        'height' => 400,
        'zoom' => 14,
        'style' => '',
        'custom_style' => '',
        'markers' => [],
      ]
    ],
    'dexp_builder_carousels' => [
      'variables' => [
        'carousels' => array(),
        'autoplay' => 1,
        'autoplayspeed' => 5000,
        'pauseonhover' => '',
        'speed' => 500,
        'move' => 1,
        'infinite' => 1,
        'lg' => 1,
        'md' => 1,
        'sm' => 1,
        'xs' => 1,
        'arrows' => true,
        'dots' => true,
        'attributes' => '',
        'wrapper_id' => '',
      ],
    ],
  );
}

function template_preprocess_dexp_builder_element(&$variables) {
  $variables['attributes']['data-shortcode-id'] = $variables['shortcode'];
  $variables['haschild'] = 1;
  $sc_service = \Drupal::service('shortcode');
  if ($sc_service->isValidShortcodeTag($variables['shortcode'])) {
    $shorcode = \Drupal::service('shortcode')->getShortcodePlugin($variables['shortcode']);
    $definition = $shorcode->getPluginDefinition();
    if (isset($definition['child']) && empty($definition['child'])) {
      $variables['haschild'] = 0;
    }
  }
  if (empty($variables['attr']))
    $variables['attr'] = [];
  $variables['attributes']['class'][] = $variables['shortcode'];
  if (isset($variables['attr']['collapse']) && $variables['attr']['collapse'] == 'true') {
    $variables['attributes']['class'][] = 'collapse';
  }
  $variables['attributes']['data-attr'] = json_encode(array_merge($variables['attr'], array('html_content' => $variables['text'])));
}

function template_preprocess_dexp_builder_title(&$variables) {
  $variables['attributes']['class'][] = 'dexp-builder-title';
  if($variables['class']){
    $variables['attributes']['class'][] = $variables['class'];
  }
  if($variables['backword']){
    $variables['attributes']['class'][] = 'backword';
  }
  $variables['html_id'] = \Drupal\Component\Utility\Html::getUniqueId('dexp-builder-title-' . REQUEST_TIME);
}


function template_preprocess_dexp_builder_stats(&$variables){
  $variables['attributes']['id'] = Html::getUniqueId("dexp-stats-" . REQUEST_TIME);
  $variables['attributes']['data-number'] = $variables['number'];
  $variables['attributes']['data-duration'] = $variables['duration'];
  $variables['attributes']['data-decimal'] = $variables['decimal'];
  $variables['attributes']['class'][] = 'dexp-stats';
}

function template_preprocess_dexp_builder_galleries(&$variables){
  $variables['attributes']['id'] = Html::getUniqueId("dexp-gallery-" . REQUEST_TIME);
  $variables['attributes']['data-transition'] = $variables['transition'];
  $variables['attributes']['data-slideshow'] = $variables['slideshow'];
  $variables['attributes']['data-width'] = $variables['width'];
  $variables['attributes']['data-height'] = $variables['height'];
}

function template_preprocess_dexp_builder_accordions(&$variables){
  $variables['html_id'] = Html::getUniqueId('dexp-accordions-' . REQUEST_TIME);
}

function template_preprocess_dexp_builder_accordion(&$variables){
  $variables['html_id'] = Html::getUniqueId('dexp-accordion-' . REQUEST_TIME);
}

function template_preprocess_dexp_builder_googlechart(&$variables){
  $variables['attributes']['data-chart-values'] = $variables['chart_values'];
  $variables['attributes']['data-chart-options'] = $variables['chart_options'];
  $variables['attributes']['style'] = $variables['chart_size'];
  $variables['attributes']['data-chart-type'] = $variables['chart_type'];
  $variables['attributes']['id'] = Html::getUniqueId('dexp-googlechart-' . REQUEST_TIME);
}

function template_preprocess_dexp_builder_button(&$variables){

}

function template_preprocess_dexp_builder_countdown(&$variables){
  $variables['attributes']['data-final-date'] = $variables['final_date'];
  $variables['attributes']['data-message'] = $variables['message'];
  $variables['attributes']['data-total'] = $variables['total'];
  $variables['attributes']['id'] = Html::getUniqueId('dexp-builder-countdown-' . REQUEST_TIME);
}

function template_preprocess_dexp_builder_gmap(&$variables){
  $variables['attributes']['data-zoom'][] = $variables['zoom'];
  $variables['attributes']['data-width'][] = $variables['width'];
  $variables['attributes']['data-height'][] = $variables['height'];
  $variables['attributes']['data-custom-style'][] = $variables['custom_style'];
  $variables['attributes']['data-map-style'][] = $variables['style'];
  $variables['attributes']['class'][] = 'dexp-builder-gmap';
  $variables['attributes']['id'] = Html::getUniqueId('dexp-builder-gmap-' . REQUEST_TIME);
}

function template_preprocess_dexp_builder_skillbar(&$variables){
  $variables['attributes']['class'][] = 'dexp-builder-progress-bar';
  $variables['attributes']['data-percent'] = $variables['percent'];
  $variables['attributes']['data-duration'] = $variables['duration'];
}

function template_preprocess_dexp_builder_progress_circle(&$variables){
  $variables['attributes']['class'][] = 'dexp-builder-progress-circle';
  $variables['attributes']['id'] = Html::getUniqueId('dexp-builder-progress-circle-' . REQUEST_TIME);
}
/**
 * Implements hook_element_info_alter().
 */
function dexp_builder_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'dexp_builder_pre_render_text_format';
}

/**
 * Set the necessary divs to work with visual help.
 */
function dexp_builder_pre_render_text_format($element) {
  if (!isset($element['#format'])) {
    return $element;
  }
  if (isset($element['value'])) {
    if (!isset($element['format'])) {
      return $element;
    }
    if (isset($element['summary']) && $element['summary']['#type'] == 'textarea') {
      //$element['summary'] = dexp_builder_load_field($element['summary'], $element['format']['format']);
    }
    if (isset($element['value']) && $element['value']['#type'] == 'textarea') {
      $element['value'] = dexp_builder_load_field($element['value'], $element['format']['format']);
    }
  }

  return $element;
}

/**
 * Make the divs and other elements required for the builder help.
 */
function dexp_builder_load_field($field, $format) {
  $textarea_id = $field['#id'];
  if (is_array($format)) {
    $format_arr = $format;
    $format = isset($format_arr['#value']) ? $format_arr['#value'] : $format_arr['#default_value'];
  }

  $builder_id = \Drupal\Component\Utility\Html::getUniqueId('dexp-builder');
  // Display the link that enable the visual element.
  $suffix = '<div class="dexp-builder" id="' . $builder_id . '" data-id="' . $textarea_id . '"><div class="builder-toolbar"><span class="fa fa-plus add-element"></span></div><div class="dexp-builder-inner"></div><div class="builder-toolbar"><span class="fa fa-plus add-element"></span></div></div>';

  // Set all div and libraries.
  $field['#suffix'] = (isset($field['#suffix']) ? $field['#suffix'] : '') . $suffix;
  //$field['#suffix'] = $suffix . (isset($field['#suffix']) ? $field['#suffix'] : '');
  $field['#attached']['library'][] = 'dexp_builder/backend';
  return $field;
}

/**
 * Implements hook_entity_insert().
 */
function dexp_builder_entity_insert(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }
  $referenced_files_by_field = _dexp_builder_get_file_fids_by_field($entity);
  foreach ($referenced_files_by_field as $field => $fids) {
    _dexp_builder_record_file_usage($fids, $entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function dexp_builder_entity_update(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }

  // On new revisions, all files are considered to be a new usage and no
  // deletion of previous file usages are necessary.
  if (!empty($entity->original) && $entity->getRevisionId() != $entity->original->getRevisionId()) {
    $referenced_files_by_field = _dexp_builder_get_file_fids_by_field($entity);
    foreach ($referenced_files_by_field as $field => $fids) {
      _dexp_builder_record_file_usage($fids, $entity);
    }
  }
  // On modified revisions, detect which file references have been added (and
  // record their usage) and which ones have been removed (delete their usage).
  // File references that existed both in the previous version of the revision
  // and in the new one don't need their usage to be updated.
  else {
    $original_fids_by_field = _dexp_builder_get_file_fids_by_field($entity->original);
    $fids_by_field = _dexp_builder_get_file_fids_by_field($entity);
    // Detect file usages that should be incremented.
    foreach ($fids_by_field as $field => $fids) {
      $added_files = array_diff($fids_by_field[$field], $original_fids_by_field[$field]);
      _dexp_builder_record_file_usage($added_files, $entity);
    }

    // Detect file usages that should be decremented.
    foreach ($original_fids_by_field as $field => $fids) {
      $removed_files = array_diff($original_fids_by_field[$field], $fids_by_field[$field]);
      _dexp_builder_delete_file_usage($removed_files, $entity, 1);
    }
  }
}


/**
 * Implements hook_entity_delete().
 */
function dexp_builder_entity_delete(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }
  $referenced_files_by_field = _dexp_builder_get_file_fids_by_field($entity);
  foreach ($referenced_files_by_field as $field => $fids) {
    _dexp_builder_delete_file_usage($fids, $entity, 0);
  }
}


/**
 * Finds all files referenced (file:fid) by formatted text fields.
 *
 * @param EntityInterface $entity
 *   An entity whose fields to analyze.
 *
 * @return array
 *   An array of file fids.
 */
function _dexp_builder_get_file_fids_by_field(EntityInterface $entity) {
  $fids = array();

  $formatted_text_fields = _dexp_builder_get_formatted_text_fields($entity);
  foreach ($formatted_text_fields as $formatted_text_field) {
    $text = '';
    $field_items = $entity->get($formatted_text_field);
    foreach ($field_items as $field_item) {
      $text .= $field_item->value;
      if ($field_item->getFieldDefinition()->getType() == 'text_with_summary') {
        $text .= $field_item->summary;
      }
    }
    $fids[$formatted_text_field] = _dexp_builder_parse_file_fids($text);
  }
  return $fids;
}

/**
 * Determines the formatted text fields on an entity.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   An entity whose fields to analyze.
 *
 * @return array
 *   The names of the fields on this entity that support formatted text.
 */
function _dexp_builder_get_formatted_text_fields(FieldableEntityInterface $entity) {
  $field_definitions = $entity->getFieldDefinitions();
  if (empty($field_definitions)) {
    return array();
  }

  // Only return formatted text fields.
  return array_keys(array_filter($field_definitions, function (FieldDefinitionInterface $definition) {
        return in_array($definition->getType(), array('text', 'text_long', 'text_with_summary'), TRUE);
      }));
}

/**
 * Parse an HTML snippet for any linked file with file:fid attribute values.
 *
 * @param string $text
 *   The partial (X)HTML snippet to load. Invalid markup will be corrected on
 *   import.
 *
 * @return array
 *   An array of all found fids.
 */
function _dexp_builder_parse_file_fids($text) {
  preg_match_all('/[\'|\"]file:([0-9]+)[\'|\"]/', $text, $matches);
  return $matches[1];
}

/**
 * Records file usage of files referenced by formatted text fields.
 *
 * Every referenced file that does not yet have the FILE_STATUS_PERMANENT state,
 * will be given that state.
 *
 * @param array $fids
 *   An array of file fids.
 * @param EntityInterface $entity
 *   An entity whose fields to inspect for file references.
 */
function _dexp_builder_record_file_usage(array $fids, EntityInterface $entity) {
  foreach ($fids as $fid) {
    if ($file = File::load($fid)) {
      if ($file->status !== FILE_STATUS_PERMANENT) {
        $file->status = FILE_STATUS_PERMANENT;
        $file->save();
      }
      \Drupal::service('file.usage')->add($file, 'dexp_builder', $entity->getEntityTypeId(), $entity->id());
    }
  }
}

/**
 * Deletes file usage of files referenced by formatted text fields.
 *
 * @param array $fids
 *   An array of file entity fids.
 * @param EntityInterface $entity
 *   An entity whose fields to inspect for file references.
 * @param $count
 *   The number of references to delete. Should be 1 when deleting a single
 *   revision and 0 when deleting an entity entirely.
 *
 * @see \Drupal\file\FileUsage\FileUsageInterface::delete()
 */
function _dexp_builder_delete_file_usage(array $fids, EntityInterface $entity, $count) {
  foreach ($fids as $fid) {
    if ($file = File::load($fid)) {
      \Drupal::service('file.usage')->delete($file, 'dexp_builder', $entity->getEntityTypeId(), $entity->id(), $count);
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function dexp_builder_page_attachments_alter(array &$attachments) {
  if (\Drupal::moduleHandler()->moduleExists('dexp_block_settings')) {
    $attachments['#attached']['library'][] = 'dexp_block_settings/animate';
    $attachments['#attached']['library'][] = 'dexp_block_settings/parallax';
  }else{
    $attachments['#attached']['library'][] = 'dexp_builder/animate';
    $attachments['#attached']['library'][] = 'dexp_builder/parallax';
  }
  $attachments['#attached']['library'][] = 'dexp_builder/frontend';
}

/**
 * Implements hook_library_info_alter().
 */
function dexp_builder_library_info_alter(&$libraries, $extension){
  if ($extension === 'dexp_builder' && isset($libraries['gmap'])) {
    $config = \Drupal::service('config.factory')->getEditable('dexp_builder.settings');
    $gmap_api = $config->get('gmap_api');
    $libraries['gmap']['js'] = [
      '//maps.google.com/maps/api/js?key='.$gmap_api => ['type' => 'external'],
      'assets/js/dexp-gmap.js' => [],
    ];
  }
  if ($extension === 'dexp_builder' && function_exists('libraries_get_path')) {
    $library_path = libraries_get_path('slick') ? libraries_get_path('slick') : false;
    if ($library_path) {
      $libraries['slick']['js'] = ['/' . $library_path . '/slick/slick.min.js' => ['weight' => -3]];
      $libraries['slick']['css']['base'] = ['/' . $library_path . '/slick/slick.css' => []];
      $libraries['slick.css']['css']['theme'] = ['/' . $library_path . '/slick/slick-theme.css' => []];
    }
  }
}
/**
 * Implements hook_theme_suggestions_HOOK().
 */
function dexp_builder_theme_suggestions_dexp_builder_box(array $variables) {
  if (isset($variables['layout']) && $variables['layout'] != "") {
    return array('dexp_builder_box__'.$variables['layout']);
  }
}

function dexp_builder_preprocess_textarea(&$variables){
  if(isset($variables['element']['#encode']) && $variables['element']['#encode']){
    $variables['attributes']['class'][] = 'encode';
  }
}